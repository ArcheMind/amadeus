name: Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  workflow_dispatch:

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest]

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install uv (macOS)
        if: runner.os == 'macOS'
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Add uv to path (macOS)
        if: runner.os == 'macOS'
        run: echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install uv (Windows)
        if: runner.os == 'Windows'
        run: powershell -ExecutionPolicy ByPass -c "irm https://astral.sh/uv/install.ps1 | iex"

      - name: Setup code signing (macOS)
        if: runner.os == 'macOS'
        env:
          CERTIFICATE_BASE64: ${{ secrets.CERTIFICATE_BASE64 }}
          P12_BASE64: ${{ secrets.P12_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Create temporary files for certificates
          echo "$CERTIFICATE_BASE64" | base64 --decode > certificate.cer
          echo "$P12_BASE64" | base64 --decode > certificate.p12
          
          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain
          
          # Import Apple Worldwide Developer Relations Intermediate Certificate
          curl -o AppleWWDRCA.cer https://www.apple.com/certificateauthority/AppleWWDRCA.cer
          security import AppleWWDRCA.cer -k build.keychain -T /usr/bin/codesign
          
          # Import user certificate and p12 file
          security import certificate.cer -k build.keychain -T /usr/bin/codesign
          security import certificate.p12 -k build.keychain -P "$P12_PASSWORD" -T /usr/bin/codesign
          
          # Allow codesign to access the imported key
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          
          # Verify identities
          echo "Available identities in keychain:"
          security find-identity -v -p codesigning build.keychain
          
          # Clean up certificate files
          rm certificate.cer certificate.p12 AppleWWDRCA.cer

      - name: Install dependencies
        run: npm install

      - name: Build application
        run: npm run build

      - name: Clean up keychain (macOS)
        if: runner.os == 'macOS' && always()
        run: |
          security delete-keychain build.keychain || true

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-build
          path: |
            dist_electron/*.dmg
            dist_electron/*.exe

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist_electron

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist_electron/*/*.dmg
            dist_electron/*/*.exe 